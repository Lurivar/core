<?php
/*************************************************************************************/
/*      This file is part of the Thelia package.                                     */
/*                                                                                   */
/*      Copyright (c) OpenStudio                                                     */
/*      email : dev@thelia.net                                                       */
/*      web : http://www.thelia.net                                                  */
/*                                                                                   */
/*      For the full copyright and license information, please view the LICENSE.txt  */
/*      file that was distributed with this source code.                             */
/*************************************************************************************/

namespace Thelia\Core\Template\Smarty\Plugins;

use Thelia\Core\Event\Hook\HookRenderBlockEvent;
use Thelia\Core\Event\Hook\HookRenderEvent;
use Thelia\Core\Template\Smarty\SmartyParser;
use Thelia\Core\Template\Smarty\SmartyPluginDescriptor;
use Thelia\Core\Template\Smarty\AbstractSmartyPlugin;
use Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher;
use Thelia\Log\Tlog;

/**
 * Plugin for smarty defining blocks and functions for using Hooks.
 *
 * Class Hook
 * @package Thelia\Core\Template\Smarty\Plugins
 * @author Julien ChansÃ©aume <jchanseaume@openstudio.fr>
 */
class Hook extends AbstractSmartyPlugin
{

    private $dispatcher;

    public function __construct(ContainerAwareEventDispatcher $dispatcher)
    {
        $this->dispatcher = $dispatcher;
    }

    /**
     * Generates the content of the hook
     *
     * {hook name="hook_code" var1="value1" var2="value2" ... }
     *
     * This function create an event, feed it with the custom variables passed to the function (var1, var2, ...) and
     * dispatch it to the hooks that respond to it.
     *
     * The name of the event is `hook.{context}.{hook_code}` where :
     *      * context : the id of the context of the smarty render : 1: frontoffice, 2: backoffice, 3: email, 4: pdf
     *      * hook_code : the code of the hook
     *
     * The event collects all the fragments of text rendered in each modules functions that listen to this event.
     * Finally, this fragments are concatenated and injected in the template
     *
     * @param  array        $params the params passed in the smarty function
     * @param  SmartyParser $smarty the smarty parser
     * @return string       the contents generated by modules
     */
    public function processHookFunction($params, &$smarty)
    {
        $hookName = $this->getParam($params, 'name');
        $type = $smarty->getTemplateDefinition()->getType();

        Tlog::getInstance()->addDebug("_HOOK_ process hook : " . $hookName);

        $event = new HookRenderEvent($hookName, $params);
        $event->setArguments($this->getArgumentsFromParams($params));

        // todo implement a before hook
        // $event = $this->getDispatcher()->dispatch('hook.before.' . $hookName, $event);
        $this->getDispatcher()->dispatch('hook.' . $type . '.' . $hookName, $event);
        // todo implement a after hook for post treatment on event
        // $event = $this->getDispatcher()->dispatch('hook.after.' . $hookName, $event);

        $content = $event->dump();

        return $content;
    }

    /**
     * Generates the content of the hookBlock block
     *
     * @param  array        $params
     * @param  string       $content
     * @param  SmartyParser $smarty
     * @param  bool         $repeat
     * @return string       no text is returned.
     */
    public function processHookBlock($params, $content, $smarty, &$repeat)
    {
        if (! $repeat) {
            return $content;
        }

        $hookName = $this->getParam($params, 'name');
        $type = $smarty->getTemplateDefinition()->getType();

        Tlog::getInstance()->addDebug("_HOOK_ process hook block : " . $hookName);

        $event = new HookRenderBlockEvent($hookName, $params);

        // todo implement a before hook
        // $event = $this->getDispatcher()->dispatch('hook.before.' . $hookName, $event);
        $this->getDispatcher()->dispatch('hook.' . $type . '.' . $hookName, $event);
        // todo implement a after hook for post treatment on event
        // $event = $this->getDispatcher()->dispatch('hook.after.' . $hookName, $event);

        foreach ($event->keys() as $key) {
            Tlog::getInstance()->addDebug("_HOOK_ block assign : " . $key);
            $smarty->assign($key, $event->get($key));
        }
    }

    /**
     * Clean the params of the params passed to the hook function or block to feed the arguments of the event
     * with relevant arguments.
     *
     * @param        $params
     * @return array
     */
    protected function getArgumentsFromParams($params)
    {
        $args = array();
        $excludes = array("name", "before", "separator", "after");

        if (is_array($params)) {
            foreach ($params as $key => $value) {
                if (! in_array($key, $excludes)) {
                    $args[$key] = $value;
                }
            }
        }

        return $args;
    }

    /**
     * Define the various smarty plugins handled by this class
     *
     * @return an array of smarty plugin descriptors
     */
    public function getPluginDescriptors()
    {
        return array(
            new SmartyPluginDescriptor('function', 'hook', $this, 'processHookFunction'),
            new SmartyPluginDescriptor('block', 'hookBlock', $this, 'processHookBlock')
        );
    }

    /**
     * Return the event dispatcher,
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcher
     */
    public function getDispatcher()
    {
        return $this->dispatcher;
    }

}
