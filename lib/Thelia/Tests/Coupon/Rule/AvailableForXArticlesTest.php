<?php
namespace Thelia\Coupon;

use Thelia\Coupon\Rule\AvailableForXArticles;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-08-19 at 18:26:01.
 */
class AvailableForXArticlesTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    protected function generateValidCouponBaseAdapterMock()
    {
        /** @var CouponAdapterInterface $stubTheliaAdapater */
       $stubTheliaAdapater = $this->getMock(
           'CouponBaseAdapter',
           array('getNbArticlesInTheCart'),
           array()
       );
        $stubTheliaAdapater->expects($this->any())
            ->method('getNbArticlesInTheCart')
            ->will($this->returnValue(4));

        return $stubTheliaAdapater;
    }

    /**
     *
     * @covers Thelia\Coupon\Rule\AvailableForXArticles::checkBackOfficeIntput
     *
     */
    public function testValidBackOfficeInput()
    {
        /** @var CouponAdapterInterface $stubTheliaAdapater */
        $stubTheliaAdapater = $this->generateValidCouponBaseAdapterMock();

        $validators = array(4);
        $validated = array($stubTheliaAdapater->getNbArticlesInTheCart());
        $rule = new AvailableForXArticles($validators, $validated);

        $expected = true;
        $actual = $rule->checkBackOfficeIntput();
        $this->assertEquals($expected, $actual);
    }

    /**
     *
     * @covers Thelia\Coupon\Rule\AvailableForXArticles::checkBackOfficeIntput
     *
     */
    public function testInValidBackOfficeInput()
    {
        /** @var CouponAdapterInterface $stubTheliaAdapater */
        $stubTheliaAdapater = $this->generateValidCouponBaseAdapterMock();

        $validators = array(4.5);
        $validated = array($stubTheliaAdapater->getNbArticlesInTheCart());
        $rule = new AvailableForXArticles($validators, $validated);

        $expected = false;
        $actual = $rule->checkBackOfficeIntput();
        $this->assertEquals($expected, $actual);

        $validators = array(-1);
        $validated = array($stubTheliaAdapater->getNbArticlesInTheCart());
        $rule = new AvailableForXArticles($validators, $validated);

        $expected = false;
        $actual = $rule->checkBackOfficeIntput();
        $this->assertEquals($expected, $actual);

        $validators = array('bad');
        $validated = array($stubTheliaAdapater->getNbArticlesInTheCart());
        $rule = new AvailableForXArticles($validators, $validated);

        $expected = false;
        $actual = $rule->checkBackOfficeIntput();
        $this->assertEquals($expected, $actual);
    }



    /**
     *
     * @covers Thelia\Coupon\Rule\AvailableForXArticles::checkCheckoutInput
     *
     */
    public function testValidCheckoutInput()
    {
        /** @var CouponAdapterInterface $stubTheliaAdapater */
        $stubTheliaAdapater = $this->generateValidCouponBaseAdapterMock();

        $validators = array(4);
        $validated = array($stubTheliaAdapater->getNbArticlesInTheCart());
        $rule = new AvailableForXArticles($validators, $validated);

        $expected = true;
        $actual = $rule->checkCheckoutInput();
        $this->assertEquals($expected, $actual);
    }

    /**
     *
     * @covers Thelia\Coupon\Rule\AvailableForXArticles::checkCheckoutInput
     *
     */
    public function testInValidCheckoutInput()
    {
        /** @var CouponAdapterInterface $stubTheliaAdapater */
        $stubTheliaAdapater = $this->generateValidCouponBaseAdapterMock();

        $validators = array(4.5);
        $validated = array($stubTheliaAdapater->getNbArticlesInTheCart());
        $rule = new AvailableForXArticles($validators, $validated);

        $expected = false;
        $actual = $rule->checkCheckoutInput();
        $this->assertEquals($expected, $actual);

        $validators = array(-1);
        $validated = array($stubTheliaAdapater->getNbArticlesInTheCart());
        $rule = new AvailableForXArticles($validators, $validated);

        $expected = false;
        $actual = $rule->checkCheckoutInput();
        $this->assertEquals($expected, $actual);

        $validators = array('bad');
        $validated = array($stubTheliaAdapater->getNbArticlesInTheCart());
        $rule = new AvailableForXArticles($validators, $validated);

        $expected = false;
        $actual = $rule->checkCheckoutInput();
        $this->assertEquals($expected, $actual);
    }

    /**
     *
     * @covers Thelia\Coupon\Rule\AvailableForXArticles::isMatching
     *
     */
    public function testMatchingRuleEqual()
    {
        /** @var CouponAdapterInterface $stubTheliaAdapater */
        $stubTheliaAdapater = $this->generateValidCouponBaseAdapterMock();

        $validators = array(4);
        $validated = array($stubTheliaAdapater->getNbArticlesInTheCart());
        $rule = new AvailableForXArticles($validators, $validated);

        $expected = true;
        $actual = $rule->isMatching();
        $this->assertEquals($expected, $actual);
    }

    /**
     *
     * @covers Thelia\Coupon\Rule\AvailableForXArticles::isMatching
     *
     */
    public function testMatchingRuleSuperior()
    {
        /** @var CouponAdapterInterface $stubTheliaAdapater */
        $stubTheliaAdapater = $this->generateValidCouponBaseAdapterMock();

        $validators = array(5);
        $validated = array($stubTheliaAdapater->getNbArticlesInTheCart());
        $rule = new AvailableForXArticles($validators, $validated);

        $expected = true;
        $actual = $rule->isMatching();
        $this->assertEquals($expected, $actual);
    }

    /**
     *
     * @covers Thelia\Coupon\Rule\AvailableForXArticles::isMatching
     *
     */
    public function testNotMatchingRule()
    {
        /** @var CouponAdapterInterface $stubTheliaAdapater */
        $stubTheliaAdapater = $this->generateValidCouponBaseAdapterMock();

        $validators = array(3);
        $validated = array($stubTheliaAdapater->getNbArticlesInTheCart());
        $rule = new AvailableForXArticles($validators, $validated);

        $expected = false;
        $actual = $rule->isMatching();
        $this->assertEquals($expected, $actual);
    }


    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

}
