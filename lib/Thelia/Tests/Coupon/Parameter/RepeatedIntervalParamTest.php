<?php
namespace Thelia\Coupon;

use Symfony\Component\Intl\Exception\NotImplementedException;
use Thelia\Coupon\Parameter\RepeatedIntervalParam;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-08-19 at 18:26:01.
 */
class RepeatedIntervalParamTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     *
     * @covers Thelia\Coupon\Parameter\RepeatedIntervalParam::compareTo
     *
     */
    public function testInferiorDate()
    {
        $startDateValidator = new \DateTime("2012-07-08");
        $dateToValidate = new \DateTime("2012-07-07");
        $duration = 10;

        $RepeatedIntervalParam = new RepeatedIntervalParam();
        $RepeatedIntervalParam->setFrom($startDateValidator);
        $RepeatedIntervalParam->setDurationInDays($duration);

        $RepeatedIntervalParam->repeatEveryMonth();

        $expected = -1;
        $actual = $RepeatedIntervalParam->compareTo($dateToValidate);
        $this->assertEquals($expected, $actual);
    }

    /**
     *
     * @covers Thelia\Coupon\Parameter\RepeatedIntervalParam::compareTo
     *
     */
    public function testEqualsDateRepeatEveryMonthOneTimeFirstPeriodBegining()
    {
        $startDateValidator = new \DateTime("2012-07-08");
        $dateToValidate = new \DateTime("2012-07-08");
        $duration = 10;

        $RepeatedIntervalParam = new RepeatedIntervalParam();
        $RepeatedIntervalParam->setFrom($startDateValidator);
        $RepeatedIntervalParam->setDurationInDays($duration);
        $RepeatedIntervalParam->repeatEveryMonth();

        $expected = 0;
        $actual = $RepeatedIntervalParam->compareTo($dateToValidate);
        $this->assertEquals($expected, $actual);
    }

    /**
     *
     * @covers Thelia\Coupon\Parameter\RepeatedIntervalParam::compareTo
     *
     */
    public function testEqualsDateRepeatEveryMonthOneTimeFirstPeriodMiddle()
    {
        $startDateValidator = new \DateTime("2012-07-08");
        $dateToValidate = new \DateTime("2012-07-13");
        $duration = 10;

        $RepeatedIntervalParam = new RepeatedIntervalParam();
        $RepeatedIntervalParam->setFrom($startDateValidator);
        $RepeatedIntervalParam->setDurationInDays($duration);
        $RepeatedIntervalParam->repeatEveryMonth();

        $expected = 0;
        $actual = $RepeatedIntervalParam->compareTo($dateToValidate);
        $this->assertEquals($expected, $actual);
    }

    /**
     *
     * @covers Thelia\Coupon\Parameter\RepeatedIntervalParam::compareTo
     *
     */
    public function testEqualsDateRepeatEveryMonthOneTimeFirstPeriodEnding()
    {
        $startDateValidator = new \DateTime("2012-07-08");
        $dateToValidate = new \DateTime("2012-07-18");
        $duration = 10;

        $RepeatedIntervalParam = new RepeatedIntervalParam();
        $RepeatedIntervalParam->setFrom($startDateValidator);
        $RepeatedIntervalParam->setDurationInDays($duration);
        $RepeatedIntervalParam->repeatEveryMonth();

        $expected = 0;
        $actual = $RepeatedIntervalParam->compareTo($dateToValidate);
        $this->assertEquals($expected, $actual);
    }

    /**
     *
     * @covers Thelia\Coupon\Parameter\RepeatedIntervalParam::compareTo
     *
     */
    public function testEqualsDateRepeatEveryMonthOneTimeSecondPeriodBegining()
    {
        $startDateValidator = new \DateTime("2012-08-08");
        $dateToValidate = new \DateTime("2012-08-08");
        $duration = 10;

        $RepeatedIntervalParam = new RepeatedIntervalParam();
        $RepeatedIntervalParam->setFrom($startDateValidator);
        $RepeatedIntervalParam->setDurationInDays($duration);
        $RepeatedIntervalParam->repeatEveryMonth();

        $expected = 0;
        $actual = $RepeatedIntervalParam->compareTo($dateToValidate);
        $this->assertEquals($expected, $actual);
    }

    /**
     *
     * @covers Thelia\Coupon\Parameter\RepeatedIntervalParam::compareTo
     *
     */
    public function testEqualsDateRepeatEveryMonthOneTimeSecondPeriodMiddle()
    {
        $startDateValidator = new \DateTime("2012-08-08");
        $dateToValidate = new \DateTime("2012-08-13");
        $duration = 10;

        $RepeatedIntervalParam = new RepeatedIntervalParam();
        $RepeatedIntervalParam->setFrom($startDateValidator);
        $RepeatedIntervalParam->setDurationInDays($duration);
        $RepeatedIntervalParam->repeatEveryMonth();

        $expected = 0;
        $actual = $RepeatedIntervalParam->compareTo($dateToValidate);
        $this->assertEquals($expected, $actual);
    }

    /**
     *
     * @covers Thelia\Coupon\Parameter\RepeatedIntervalParam::compareTo
     *
     */
    public function testEqualsDateRepeatEveryMonthOneTimeSecondPeriodEnding()
    {
        $startDateValidator = new \DateTime("2012-08-08");
        $dateToValidate = new \DateTime("2012-08-18");
        $duration = 10;

        $RepeatedIntervalParam = new RepeatedIntervalParam();
        $RepeatedIntervalParam->setFrom($startDateValidator);
        $RepeatedIntervalParam->setDurationInDays($duration);
        $RepeatedIntervalParam->repeatEveryMonth();

        $expected = 0;
        $actual = $RepeatedIntervalParam->compareTo($dateToValidate);
        $this->assertEquals($expected, $actual);
    }

    /**
     *
     * @covers Thelia\Coupon\Parameter\RepeatedIntervalParam::compareTo
     *
     */
    public function testEqualsDateRepeatEveryMonthFourTimeLastPeriodBegining()
    {
        $startDateValidator = new \DateTime("2012-10-08");
        $dateToValidate = new \DateTime("2012-10-08");
        $duration = 10;

        $RepeatedIntervalParam = new RepeatedIntervalParam();
        $RepeatedIntervalParam->setFrom($startDateValidator);
        $RepeatedIntervalParam->setDurationInDays($duration);
        $RepeatedIntervalParam->repeatEveryMonth(1, 4);

        $expected = 0;
        $actual = $RepeatedIntervalParam->compareTo($dateToValidate);
        $this->assertEquals($expected, $actual);
    }

    /**
     *
     * @covers Thelia\Coupon\Parameter\RepeatedIntervalParam::compareTo
     *
     */
    public function testEqualsDateRepeatEveryMonthFourTimeLastPeriodMiddle()
    {
        $startDateValidator = new \DateTime("2012-10-08");
        $dateToValidate = new \DateTime("2012-10-13");
        $duration = 10;

        $RepeatedIntervalParam = new RepeatedIntervalParam();
        $RepeatedIntervalParam->setFrom($startDateValidator);
        $RepeatedIntervalParam->setDurationInDays($duration);
        $RepeatedIntervalParam->repeatEveryMonth(1, 4);

        $expected = 0;
        $actual = $RepeatedIntervalParam->compareTo($dateToValidate);
        $this->assertEquals($expected, $actual);
    }

    /**
     *
     * @covers Thelia\Coupon\Parameter\RepeatedIntervalParam::compareTo
     *
     */
    public function testEqualsDateRepeatEveryMonthFourTimeLastPeriodEnding()
    {
        $startDateValidator = new \DateTime("2012-10-08");
        $dateToValidate = new \DateTime("2012-10-18");
        $duration = 10;

        $RepeatedIntervalParam = new RepeatedIntervalParam();
        $RepeatedIntervalParam->setFrom($startDateValidator);
        $RepeatedIntervalParam->setDurationInDays($duration);
        $RepeatedIntervalParam->repeatEveryMonth(1, 4);

        $expected = 0;
        $actual = $RepeatedIntervalParam->compareTo($dateToValidate);
        $this->assertEquals($expected, $actual);
    }

    /**
     *
     * @covers Thelia\Coupon\Parameter\RepeatedIntervalParam::compareTo
     *
     */
    public function testNotEqualsDateRepeatEveryMonthFourTimeInTheBegining()
    {
        $startDateValidator = new \DateTime("2012-10-08");
        $dateToValidate = new \DateTime("2012-07-19");
        $duration = 10;

        $RepeatedIntervalParam = new RepeatedIntervalParam();
        $RepeatedIntervalParam->setFrom($startDateValidator);
        $RepeatedIntervalParam->setDurationInDays($duration);
        $RepeatedIntervalParam->repeatEveryMonth(1, 4);

        $expected = -1;
        $actual = $RepeatedIntervalParam->compareTo($dateToValidate);
        $this->assertEquals($expected, $actual);
    }

    /**
     *
     * @covers Thelia\Coupon\Parameter\RepeatedIntervalParam::compareTo
     *
     */
    public function testNotEqualsDateRepeatEveryMonthFourTimeInTheMiddle()
    {
        $startDateValidator = new \DateTime("2012-10-08");
        $dateToValidate = new \DateTime("2012-08-01");
        $duration = 10;

        $RepeatedIntervalParam = new RepeatedIntervalParam();
        $RepeatedIntervalParam->setFrom($startDateValidator);
        $RepeatedIntervalParam->setDurationInDays($duration);
        $RepeatedIntervalParam->repeatEveryMonth(1, 4);

        $expected = -1;
        $actual = $RepeatedIntervalParam->compareTo($dateToValidate);
        $this->assertEquals($expected, $actual);
    }


    /**
     *
     * @covers Thelia\Coupon\Parameter\RepeatedIntervalParam::compareTo
     *
     */
    public function testNotEqualsDateRepeatEveryMonthFourTimeInTheEnd()
    {
        $startDateValidator = new \DateTime("2012-10-08");
        $dateToValidate = new \DateTime("2012-08-07");
        $duration = 10;

        $RepeatedIntervalParam = new RepeatedIntervalParam();
        $RepeatedIntervalParam->setFrom($startDateValidator);
        $RepeatedIntervalParam->setDurationInDays($duration);
        $RepeatedIntervalParam->repeatEveryMonth(1, 4);

        $expected = -1;
        $actual = $RepeatedIntervalParam->compareTo($dateToValidate);
        $this->assertEquals($expected, $actual);
    }



    /**
     *
     * @covers Thelia\Coupon\Parameter\RepeatedIntervalParam::compareTo
     *
     */
    public function testSuperiorDateRepeatEveryMonthFourTime()
    {
        $startDateValidator = new \DateTime("2012-10-08");
        $dateToValidate = new \DateTime("2012-10-19");
        $duration = 10;

        $RepeatedIntervalParam = new RepeatedIntervalParam();
        $RepeatedIntervalParam->setFrom($startDateValidator);
        $RepeatedIntervalParam->setDurationInDays($duration);
        $RepeatedIntervalParam->repeatEveryMonth(1, 4);

        $expected = -1;
        $actual = $RepeatedIntervalParam->compareTo($dateToValidate);
        $this->assertEquals($expected, $actual);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

}
